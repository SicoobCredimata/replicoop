#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
Teste final do sistema ReplicOOP - Valida√ß√£o Completa
"""

import sys
import os
sys.path.append(os.path.join(os.path.dirname(os.path.abspath(__file__)), "..", ".."))

from core.replication import ReplicationManager

def test_final_replication():
    """Teste final completo do sistema"""
    
    try:
        print("üéØ TESTE FINAL - ReplicOOP")
        print("=" * 50)
        
        # Inicializa o sistema
        replication_manager = ReplicationManager()
        
        # 1. Testa configura√ß√£o de bancos
        print("\n1Ô∏è‚É£ Configurando ambiente...")
        try:
            replication_manager.setup_databases("sandbox", "production")
            print("‚úÖ Bancos configurados com sucesso!")
        except Exception as e:
            print(f"‚ùå Erro na configura√ß√£o: {e}")
            return False
        
        # 2. Executa replica√ß√£o completa
        print("\n2Ô∏è‚É£ Executando replica√ß√£o completa...")
        try:
            result = replication_manager.execute_replication(
                tables=None,  # Todas as tabelas maintain
                replicate_data=True,
                create_backup=True
            )
            
            print(f"\nüìä RESULTADO DA REPLICA√á√ÉO:")
            print(f"Status: {'‚úÖ SUCESSO' if result['success'] else '‚ùå FALHA'}")
            print(f"Tabelas replicadas: {result['tables_replicated']}")
            print(f"Tempo de execu√ß√£o: {result['execution_time']:.2f}s")
            
            if result['failed_tables']:
                print(f"\n‚ùå Tabelas com falha ({len(result['failed_tables'])}):")
                for failed in result['failed_tables']:
                    print(f"   - {failed['table']}: {failed['error']}")
            
            if result['replicated_tables']:
                print(f"\n‚úÖ Tabelas replicadas com sucesso ({len(result['replicated_tables'])}):")
                for table in result['replicated_tables']:
                    print(f"   - {table}")
            
            return result['success']
            
        except Exception as e:
            print(f"‚ùå Erro na replica√ß√£o: {e}")
            import traceback
            print(f"Traceback: {traceback.format_exc()}")
            return False
        
        # 3. Valida replica√ß√£o
        print("\n3Ô∏è‚É£ Validando replica√ß√£o...")
        try:
            validation = replication_manager.validate_replication()
            
            print(f"\nüìã VALIDA√á√ÉO:")
            print(f"Tabelas validadas: {len(validation['table_comparisons'])}")
            
            success_count = 0
            for table_name, comparison in validation['table_comparisons'].items():
                if comparison['structures_match']:
                    print(f"‚úÖ {table_name}: Estrutura OK")
                    success_count += 1
                else:
                    print(f"‚ùå {table_name}: Estrutura DIFERENTE")
                    if comparison.get('differences'):
                        for diff in comparison['differences']:
                            print(f"   - {diff}")
            
            print(f"\nResultado: {success_count}/{len(validation['table_comparisons'])} tabelas validadas")
            return success_count == len(validation['table_comparisons'])
            
        except Exception as e:
            print(f"‚ùå Erro na valida√ß√£o: {e}")
            return False
        
    except Exception as e:
        print(f"‚ùå Erro geral: {e}")
        import traceback
        print(f"Traceback: {traceback.format_exc()}")
        return False

if __name__ == "__main__":
    success = test_final_replication()
    if success:
        print("\nüéâ SISTEMA REPLICOOP FUNCIONANDO PERFEITAMENTE!")
        print("‚úÖ Todas as funcionalidades testadas com sucesso!")
    else:
        print("\n‚ùå Sistema ainda apresenta problemas")
    
    print(f"\n{'='*50}")
    print("Teste finalizado")
